\*****************************************************
5.11 What does the following statement do?
for ( ; ; ) {
// Do something
}
//
5.12 If a variable is declared in a for loop control, can it be used after the loop exits?
//
5.13 Convert the following for loop statement to a while loop and to a do-while loop:
long sum = 0;
for (int i = 0; i <= 1000; i++)
sum = sum + i;
//
5.14 Count the number of iterations in the following loops.
//
5.15 Can you convert a for loop to a while loop? List the advantages of using for loops.
//
5.16 Can you always convert a while loop into a for loop? Convert the following while
loop into a for loop.
int i = 1;
int sum = 0;
while (sum < 10000) {
sum = sum + i;
i++;
}
//
5.17 Identify and fix the errors in the following code:
1 public class Test {
2 public void main(String[] args) {
3 for (int i = 0; i < 10; i++);
4 sum += i;
5
6 if (i < j);
7 System.out.println(i)
8 else
9 System.out.println(j);
10
11 while (j < 10);
12 {
13 j++;
14 }
15
16 do {
17 j++;
18 } while (j < 10)
19 }
20 }
//
5.18 What is wrong with the following programs?
//
5.19 How many times is the println statement executed?
for (int i = 0; i < 10; i++)
for (int j = 0; j < i; j++)
System.out.println(i * j)
//
5.20 Show the output of the following programs. (Hint: Draw a table and list the variables
in the columns to trace these programs.)
//
5.21 Will the program work if n1 and n2 are replaced by n1 / 2 and n2 / 2 in line 17
in Listing 5.9?
//
5.22 In Listing 5.11, why is it wrong if you change the code (char)(hexValue + '0')
to hexValue + '0' in line 21?
//
5.23 In Listing 5.11, how many times the loop body is executed for a decimal number 245
and how many times the loop body is executed for a decimal number 3245?
//
5.24 What is the keyword break for? What is the keyword continue for? Will the following
programs terminate? If so, give the output.
//
5.25 The for loop on the left is converted into the while loop on the right. What is
wrong? Correct it.
//
5.26 Rewrite the programs TestBreak and TestContinue in Listings 5.12 and 5.13
without using break and continue.
//
5.27 After the break statement in (a) is executed in the following loop, which statement
is executed? Show the output. After the continue statement in (b) is executed in the
following loop, which statement is executed? Show the output.
//
*****************************************************/
5.11:
The loop keeps doing something indefinitely.
5.12:
No. The scope of the variable is inside the loop.
5.13:
while loop:
long sum = 0; 
int i=0; 
while (i <= 1000) {  
  sum += i++; 
}
    
do-while loop:
do-while loop:
long sum = 0;
int i = 0;
do { 
  sum += i++;
}
while (i <= 1000);
5.14:
(a)
n times

(b)
n+1 times

(b)
n-5 times

(d)
The ceiling of (n-5)/3 times

5.15:
Yes. When using a while loop, programmers often forget to adjust the control variable such as i++. Using for loop can avoid this error.

5.16:
Yes.
for (int i=1; sum < 10000; i++) 
   sum = sum + i; 
5.17:
Line 2: missing static. 
Line 3: The semicolon (;) at the end of the for loop heading should be removed. 
Line 4: sum not defined. 
Line 6: the semicolon (;) at the end of the if statement should be removed. 
Line 6: j not defined. 
Line 7: Missing a semicolon for the first println statement. 
Line 11: The semicolon (;) at the end of the while heading should be removed. 
Line 18: Missing a semicolon at the end of the do-while loop.
5.18:
(a) Line 8: Missing ; at the end of this line. 
(b) Line 3: The ; at the end of for loop should be removed.
for (int i = 0; i < 10; i++);
5.19:
When i is 0, the println statement is not executed. 
When i is 1, the println statement is executed once. 
When i is 2, the println statement is executed two times. 
When i is 3, the println statement is executed three times. 
When i is 9, the println statement is executed nine times. 
So, the total is 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45
5.20:
(a). 
0 0 1 0 1 2 0 1 2 3  
 
(b).  
**** 
**** 
2 **** 
3 2 **** 
4 3 2 ****  
(c).  
1xxx2xxx4xxx8xxx16xxx  
1xxx2xxx4xxx8xxx1xxx2xxx4xxx
1xxx2xxx 
1xxx  
(d).  
1G  
1G3G  
1G3G5G  
1G3G5G7G  
1G3G5G7G9G
5.21:
No. Try n1 = 3 and n2 =3.
5.22:
Possible loss of precision for int to char.
5.23:
The number of digits in the hex number determines the number of times the loop is executed. 245 is F5 in hex. So the loop body is executed 2 times. 3245 is CAD in hex. So, So the loop body is executed 3 times.
5.24:
The keyword break is used to exit the current loop. The program in (A) will terminate. The output is Balance is 1. 
The keyword continue causes the rest of the loop body to be skipped for the current iteration.
The while loop will not terminate in (B).
5.25:
If a continue statement is executed inside a for loop, the rest of the iteration is skipped, then the action-after-each-iteration is performed and the loop-continuation-condition is checked. If a continue statement is executed inside a while loop, the rest of the iteration is skipped, then the loop-continuation-condition is checked. Here is the fix:
int i = 0, sum = 0; 
while (i < 4) {
  if (i % 3 == 0) {
    i++; 
    continue;
  } 
  sum += i;
  i++;
}
5.26:
class TestBreak {
  public static void main(string[]args) {
    int sum = 0;
    int number = 0;
    
    while (number < 20 && sum < 100) { 
      number++;
      sum += number;
    }
    
    System.out.println("The sum is " + sum);
  }
}

class TestContinue { 
  public static void main(String[] args) { 
    int sum = 0;
    int number = 0;

    while (number < 20) { 
      number++;
      if (number != 10 && number != 11) 
        sum += number;
    } 

    System.out.println("The sum is " + sum);
  }
}

5.27:
(a) After the break statement is executed, the last println statement is executed. The output of this fragment is
1
2
1
2
2
3
(b) After the continue statement is executed, the statement
  j++
will be executed. The output of this fragment is
1
2
1
2
2
3