\*****************************************************
10.17 What is the output of the following code?
String s1 = "Welcome to Java";
String s2 = s1.replace("o", "abc");
System.out.println(s1);
System.out.println(s2);
//
10.18 Let s1 be "Welcome" and s2 be "welcome". Write the code for the following
statements:
a. Replace all occurrences of the character e with E in s1 and assign the new string
to s2.
b. Split Welcome to Java and HTML into an array tokens delimited by a space
and assign the first two tokens into s1 and s2.
//
10.19 Does any method in the String class change the contents of the string?
//
10.20 Suppose string s is created using new String(); what is s.length()?
//
10.21 How do you convert a char, an array of characters, or a number to a string?
//
10.22 Why does the following code cause a NullPointerException?
1 public class Test {
2 private String text;
3
4 public Test(String s) {
5 String text = s;
6 }
7
8 public static void main(String[] args) {
9 Test test = new Test("ABC");
10 System.out.println(test.text.toLowerCase());
11 }
12 }
10.23 What is wrong in the following program?
1 public class Test {
2 String text;
3
4 public void Test(String s) {
5 text = s;
6 }
7
8 public static void main(String[] args) {
9 Test test = new Test("ABC");
10 System.out.println(test);
11 }
12 }
//
10.24 Show the output of the following code.
public class Test {
public static void main(String[] args) {
System.out.println("Hi, ABC, good".matches("ABC "));
System.out.println("Hi, ABC, good".matches(".*ABC.*"));
System.out.println("A,B;C".replaceAll(",;", "#"));
System.out.println("A,B;C".replaceAll("[,;]", "#"));
String[] tokens = "A,B;C".split("[,;]");
for (int i = 0; i < tokens.length; i++)
System.out.print(tokens[i] + " ");
}
}
//
10.25 Show the output of the following code.
public class Test {
public static void main(String[] args) {
String s = "Hi, Good Morning";
System.out.println(m(s));
}
public static int m(String s) {
int count = 0;
for (int i = 0; i < s.length(); i++)
if (Character.isUpperCase(s.charAt(i)))
count++;
return count;
}
}
//
10.26 What is the difference between StringBuilder and StringBuffer?
//
10.27 How do you create a string builder from a string? How do you return a string from a
string builder?
//
10.28 Write three statements to reverse a string s using the reverse method in the
StringBuilder class.
//
10.29 Write three statements to delete a substring from a string s of 20 characters, starting
at index 4 and ending with index 10. Use the delete method in the String-
Builder class.
//
10.30 What is the internal storage for characters in a string and a string builder?
//
10.31 Suppose that s1 and s2 are given as follows:
StringBuilder s1 = new StringBuilder("Java");
StringBuilder s2 = new StringBuilder("HTML");
Show the value of s1 after each of the following statements. Assume that the statements
are independent.
a. s1.append(" is fun");
b. s1.append(s2);
c. s1.insert(2, "is fun");
d. s1.insert(1, s2);
e. s1.charAt(2);
f. s1.length();
g. s1.deleteCharAt(3);
h. s1.delete(1, 3);
i. s1.reverse();
j. s1.replace(1, 3, "Computer");
k. s1.substring(1, 3);
l. s1.substring(2);
//
10.32 Show the output of the following program:
public class Test {
public static void main(String[] args) {
String s = "Java";
StringBuilder builder = new StringBuilder(s);
change(s, builder);
System.out.println(s);
System.out.println(builder);
}
private static void change(String s, StringBuilder builder) {
s = s + " and HTML";
builder.append(" and HTML");
}
}

*****************************************************/
10.17:
The output is
Welcome to Java
Welcabcme tabc Java
Hint: No method in the String class can change the content of the string. String is an immutable class.
10.18:
a. 
String s3 = s1.replace('e', 'E'); 

b. 
String[] tokens = "Welcome to Java and HTML".split(' ');
s1 = tokens[0];
s2 = tokens[1];

10.19:
No
10.20:
0
10.21:
 Use the overloaded static valueOf method in the String class.

10.22:
The text is declared in Line 2 as a data field, but redeclared in Line 5 as a local variable. The local variable is assigned with the string passed to the constructor, but the data field is still null. In Line 10, test.text is null, which causes NullPointerException when invoking the toLowerCase() method.
10.23:
The constructor is defined incorrectly. It should not have void.
10.24:
false
true
A,B;C
A#B#C
A B C
10.25:
3
10.26:
The StringBuilder class, introduced in JDK 1.5, is similar to StringBuffer except that the update methods in StringBuffer are synchronized.
10.27:
Use the StringBuilder's constructor to create a string buffer for a string, and use the toString method in StringBuilder class to return a string from a StringBuilder.
10.28:
StringBuilder sb = new StringBuilder(s); 
sb.reverse();
s = sb.toString();
10.29:
StringBuilder sb = new StringBuilder(s); 
sb.delete(4, 11);
s = sb.toString();
10.30:
Both string and string buffer use arrays to hold characters. The array in a string is fixed once a string is created. The array in a string buffer may change if the buffer capacity is changed. To accommodate the change, a new array is created.
10.31:
(a) Java is fun 
(b) JavaHTML 
(c) Jais funva 
(d) JHTMLava 
(e) v 
(f) 4 
(g) Jav 
(h) Ja 
(i) avaJ 
(j) JComputera 
(k) av 
(l) va
10.32:
The output is
    Java
    Java and HTML
    
NOTE: Inside the method, the statement s = s + " and HTML" creates a new String object s, which is different from the original String object passed to the change(s, builder) method. The original String object has not been changed. Therefore, the output from the original string is Java. Inside the method, the content of the StringBuilder object is changed to Java and HTML. Therefore, the output from builder is Java and HTML.