\*****************************************************
10.1 If you redefine the Loan class in Listing 10.2 without setter methods, is the class
immutable?
//
10.2 Is the BMI class defined in Listing 10.4 immutable?
//
10.3 What are common relationships among classes?
//
10.4 What is association? What is aggregation? What is composition?
10.5 What is UML notation of aggregation and composition?
10.6 Why both aggregation and composition are together referred to as composition?
10.7 Describe primitive-type wrapper classes.
10.8 Can each of the following statements be compiled?
a. Integer i = new Integer("23");
b. Integer i = new Integer(23);
c. Integer i = Integer.valueOf("23");
d. Integer i = Integer.parseInt("23", 8);
e. Double d = new Double();
f. Double d = Double.valueOf("23.45");
g. int i = (Integer.valueOf("23")).intValue();
h. double d = (Double.valueOf("23.4")).doubleValue();
i. int i = (Double.valueOf("23.4")).intValue();
j. String s = (Double.valueOf("23.4")).toString();
10.9 How do you convert an integer into a string? How do you convert a numeric string
into an integer? How do you convert a double number into a string? How do you
convert a numeric string into a double value?
10.10 Show the output of the following code.
public class Test {
public static void main(String[] args) {
Integer x = new Integer(3);
System.out.println(x.intValue());
System.out.println(x.compareTo(new Integer(4)));
}
}
10.11 What is the output of the following code?
public class Test {
public static void main(String[] args) {
System.out.println(Integer.parseInt("10"));
System.out.println(Integer.parseInt("10", 10));
System.out.println(Integer.parseInt("10", 16));
System.out.println(Integer.parseInt("11"));
System.out.println(Integer.parseInt("11", 10));
System.out.println(Integer.parseInt("11", 16));
}
}
//
10.12 What are autoboxing and autounboxing? Are the following statements correct?
a. Integer x = 3 + new Integer(5);
b. Integer x = 3;
c. Double x = 3;
d. Double x = 3.0;
e. int x = new Integer(3);
f. int x = new Integer(3) + new Integer(4);
//
10.13 Show the output of the following code?
public class Test {
public static void main(String[] args) {
Double x = 3.5;
System.out.println(x.intValue());
System.out.println(x.compareTo(4.5));
}
}
//
10.14 What is the output of the following code?
public class Test {
public static void main(String[] args) {
java.math.BigInteger x = new java.math.BigInteger("3");
java.math.BigInteger y = new java.math.BigInteger("7");
java.math.BigInteger z = x.add(y);
System.out.println("x is " + x);
System.out.println("y is " + y);
System.out.println("z is " + z);
}
}
//
10.15 Suppose that s1, s2, s3, and s4 are four strings, given as follows:
String s1 = "Welcome to Java";
String s2 = s1;
String s3 = new String("Welcome to Java");
String s4 = "Welcome to Java";
What are the results of the following expressions?
a. s1 == s2
b. s1 == s3
c. s1 == s4
d. s1.equals(s3)
e. s1.equals(s4)
f. "Welcome to Java".replace("Java", "HTML")
g. s1.replace('o', 'T')
h. s1.replaceAll("o", "T")
i. s1.replaceFirst("o", "T")
j. s1.toCharArray()
//
10.16 To create the string Welcome to Java, you may use a statement like this:
String s = "Welcome to Java";
or:
String s = new String("Welcome to Java");
Which one is better? Why?
*****************************************************/
10.1:
No. The Loan class has the getLoanDate() method that returns loanDate. loanDate is an object of the Date class. Since Date is mutable, the contents of loanDate can be changed. So, the Loan class is not immutable.
10.2:
Yes
10.3:
The common relationships among classes are association, aggregation, composition, and inheritance.
10.4:
Association is a general binary relationship that describes an activity between two classes. Aggregation is a special form of association that represents an ownership relationship between two objects. Aggregation models has-a relationships. An object can be owned by several other aggregating objects. If an object is exclusively owned by an aggregating object, the relationship between the object and its aggregating object is referred to as a composition.
10.5:
Aggregation: empty diamond on the aggregating class. Composition: Solid diamond on the aggregating class.
10.6:
Since aggregation and composition relationships are represented using classes in the same way, we will not differentiate them and call both compositions for simplicity.
10.7:
omitted
10.8:
a. Correct 
b. Correct 
c. Correct 
d. 19 
e. Incorrect, no default constructor in Double 
f. Correct 
g. Correct 
h. Correct 
i. Correct 
j. Correct
10.9:
You can simply use number + "" to convert an integer to a string. Alternatively use new Integer(int).toString() to convert an integer to a string. To convert a numeric string into an integer, use Integer.parseInt(s). Use new Double(double).toString() to convert a double to a string. To convert a numeric string into a double, use Double.parseDouble(s).

10.10:
 3
    -1
10.11:
10
10
16
11
11
17
10.12:
a. Correct, this is same as x = new Integer(3 + 5); 
b. Correct 
c. Wrong, this is same as Double x = new Integer(3); 
d. Correct 
e. Correct 
f. Correct

10.13:
 3
            -1
10.14:
The output is
    x is 3
    y is 7
    z is 10
    
Please note that BigInteger and BigDecimal are immutable.
10.15:
a. true 
b. false 
c. true 
d. true 
e. true 
f. Welcome to HTML 
g. WelcTme tT Java 
h. WelcTme tT Java 
i. WelcTme to Java 
j. toCharArray() returns an array of characters consisting of W, e, l, c, o, m, e, , t, o, , J, a, v, a
10.16:
String s = "Welcome to Java";
is better, because this type of string is stored as an interned string. The interned strings of the same value share the same object.
